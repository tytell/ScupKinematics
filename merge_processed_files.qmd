---
title: "Merge processed files"
format: html
editor: visual
---

```{r setup}
library(tidyverse)
library(glue)
library(targets)
library(tarchetypes)
library(here)
```

```{r}
source(here("code", "midlines.R"))
```

# Merge processed 3D data files

## Load processed data file

This loads the file `"processed_data/processed_bottomview_files.csv"` from the
targets data store. If necessary, targets will process all the other files to
get the file.
```{r}
targets::tar_load(processedfiles)
```

```{r}
processedfiles <-
  processedfiles |> 
  mutate(fileexists = map_vec(data3dfile, \(f) file.exists(file.path(datarootpath, f))))
```

```{r}
processedfiles |> 
  mutate(isprocessed = isprocessed == 1) |> 
  summarize(nprocessed = sum(isprocessed),
            nexist = sum(isprocessed & fileexists),
            nmissing = sum(isprocessed & !fileexists),
            ntotal = n(),
            pctprocessed = round(nprocessed / n() * 100),
            pctexist = round(nexist / n() * 100),
            pctmissing = round(nmissing / n() * 100))
```

```{r}
if (.Platform$OS.type == "unix") {
  datarootpath <- "/Volumes/DataSync/ScupKinematics/processed_data/experiments"
} else {
  datarootpath <- "Y:\\ScupKinematics\\processed_data\\experiments"
}
```

## Load one file

```{r}
filenames <-
  processedfiles |> 
  filter(isprocessed & fileexists) |> 
  head(3) |> 
  pull(data3dfile)
```

```{r}
data1 <- map_df(filenames, 
                \(f) read_csv(file.path(datarootpath, f), id = "filename"))
```

```{r}
data1pts <-
  data1 |> 
  select("tsec", "imnum", "speedHz", "tempC", 
         matches("[xy][LR]C[12]u_\\d+"),
         matches("(head|tail)C\\d[xy]u")) |> 
  rename_with(~str_replace(.x, "(head|tail)(C\\d)([xy])u", "\\3B\\2u_\\1")) |> 
  pivot_longer(matches("[xy][LRB]C[12]u_(head|tail|\\d+)"),
               names_to = c('.value', "side", "camera", "point"),
               names_pattern = "([xy])([LRB])(C[12])u_(.+)") |> 
  mutate(side = case_when(point == "head"  ~  "H",
                          point == "tail"  ~  "T",
                          .default = side))

head(data1pts, 200)
```


```{r}
data1 |> 
  group_by(imnum) |> 
  summarize(across(matches("(head|tail)[xyz]"),
                   first),
            tsec = first(tsec)) |> 
  ggplot(aes(x = tsec, y = taily)) +
  geom_path()
```

```{r}
data1pts <-
  data1pts |> 
  mutate(notfound = y == x) |> 
  group_by(imnum) |> 
  mutate(notfoundfr = all(notfound)) |> 
  ungroup() |> 
  filter(!notfoundfr) |> 
  select(-starts_with("notfound"))

```


```{r}
data1ptsgood <-
  data1pts |> 
  group_by(camera, speedHz, imnum) |> 
  mutate(x.head = x[point == "head"],
         x.tail = x[point == "tail"],
         y.head = y[point == "head"],
         y.tail = y[point == "tail"],
         y.med = median(y, na.rm = TRUE),
         y.L.med = median(y[side == "L"], na.rm = TRUE),
         y.R.med = median(y[side == "R"], na.rm = TRUE),
         width.med = abs(y.R.med - y.L.med)) |> 
  filter((x >= x.tail) & (x <= x.head) &
           (abs(y - y.med) <= 1.5*width.med))
  
```


```{r}
imnums <-
  data1ptsgood |> 
  pull(imnum) |> 
  unique()
```

```{r}
imnum1 <- sample(imnums, 1)
message(imnum1)

data1ptsgood |> 
  filter(imnum == imnum1) |>
  ggplot(aes(x = x, y = y, color = side)) +
  geom_point(data = ~ filter(.x, side %in% c("L", "R")), aes(group = imnum)) +
  geom_point(data = ~filter(.x, side %in% c("H", "T"))) +
  # geom_point(data = filter(data1ptsgood, imnum == imnum1) |> 
  #             filter(side %in% c("L", "R"))) +
  #              # filter((x >= x.tail) & (x <= x.head))) +
  facet_wrap(~ camera) +
  coord_fixed()
```


```{r}
data1ptsdir <-
  data1ptsgood |> 
  ungroup() |> 
  # filter(imnum %in% c(2938, 2939)) |> 
  mutate(xctr = x - x.head,
         yctr = y - y.head) |> 
  select(-contains("med")) |> 
  nest(outline = c(xctr, yctr, side),
       .by = c(tsec, imnum, speedHz, tempC, camera, x.head, x.tail, y.head, y.tail)) |> 
  mutate(swimdir =
           purrr::map(outline, \(df) get_central_axis(df, x = xctr, y = yctr))) |> 
  unnest(swimdir) |> 
  mutate(swimdirx = -swimdirx,
         swimdiry = -swimdiry)

head(data1ptsdir)
data1ptsdir$outline[[1]]
```
```{r}
data1rotate <-
  data1ptsdir |> 
  ungroup() |> 
  mutate(outline = purrr::pmap(list(df = outline, x = "xctr", y = "yctr", 
                                 a = "m", b = "n",
                                 swimdirx = swimdirx, swimdiry = swimdiry),
                            rotate_to_swimdir))

head(data1rotate)
data1rotate$outline[[1]]
```

```{r}
duplicate_head_tail <- function(df)
{
  ht <- df |> 
    filter(side %in% c("T", "H"))
  
  htR <- ht |> 
    mutate(side = "R")
  htL <- ht |> 
    mutate(side = "L")
  
  bind_rows(df, htL, htR) |> 
    filter(side %in% c("L", "R"))
}

data1rotlr <-
  data1rotate |> 
  mutate(outline = map(outline, duplicate_head_tail)) |> 
  unnest(outline)

head(data1rotlr, 65)
```

```{r}
m.max <-
  data1rotlr |> 
  group_by(imnum) |> 
  filter(side == "L") |> 
  summarize(m.max = max(m, na.rm = TRUE)) |> 
  summarize(m.max = median(m.max, na.rm = TRUE)) |> 
  pull(m.max)

dm <- m.max / ceiling(m.max / 20)
m.even <- seq(0, m.max, by = dm)

m.even

```


```{r}
data1lreven <-
  data1rotlr |> 
  group_by(speedHz, camera, imnum, side) |>
  arrange(m, .by_group = TRUE) |> 
  group_modify(\(df,k) interp_even_side(df, m,n, m.even, "pt", names_suffix = '')) 
```

```{r}
data1lreven
```

```{r}
data1lreven |> 
  group_by(speedHz, camera, imnum) |> 
  pivot_wider(names_from = side, values_from = c(m, n))  |> 
  mutate(m = m_L,
         n = case_when(is.na(n_R)  ~  n_L,
                       is.na(n_L)  ~  n_R,
                       .default = (n_R + n_L)/2)) |> 
  ggplot(aes(x = m, y = n, color = imnum)) +
  geom_path(aes(group = imnum)) +
  facet_grid(speedHz ~ camera) +
  coord_fixed()
```

```{r}
data1ptsblocks <-
  data1ptsdir |> 
  group_by(camera) |> 
  arrange(tsec, .by_group = TRUE) |> 
  mutate(contigid = find_contiguous_blocks(tsec, tol = 0.01)) |> 
  dplyr::filter(!is.na(contigid))

data1ptsblocks |> 
  ggplot(aes(x = tsec, y = swimdirx, color = factor(contigid))) +
  geom_path() +
  facet_wrap(~ camera)
```


```{r}
dt <- 0.02
filtcoefs <- gsignal::butter(9, 1 * (2*dt), "low", output = "Sos")

data1even <- data1ptsblocks |> 
  group_by(camera) |>
  arrange(tsec, .by_group = TRUE) |> 
  mutate(block = find_contiguous_blocks(tsec, tol = 0.01)) |> 
  dplyr::filter(!is.na(block)) |> 
  mutate(swimang = atan2(swimdiry, swimdirx),
         swimang = gsignal::unwrap(swimang)) |> 
  group_by(camera, block) |> 
  group_modify(\(df, k) resample_pts(df, t = tsec, pts = c(swimang),
                                    dt = 0.02)) |> 
  group_modify(\(df, k) smooth_pts(df, t = tsec, pts = swimang,
                                   filtercoefs = filtcoefs, tol = 0.01)) |>
  mutate(swimdirx_s = cos(swimang_s),
         swimdiry_s = sin(swimang_s))

data1even
#   group_modify(\(df, k) smooth_xy(df, t = tsec, x = swimdirx, y = swimdiry,
#                                               filtercoefs = filtcoefs, tol = 0.01))
# 
# q |> 
#   ggplot(aes(x = tsec, y = swimdirx, color = factor(block))) +
#   geom_path() +
#   facet_wrap(~ camera)

```

```{r}
t_uneven = unique(data1ptsgood$tsec)

data1swimdir <-
  data1ptsblocks |> 
  left_join(data1even |> 
              group_by(camera) |> 
              group_modify(\(df, k) resample_pts(df, t = tsec, pts = swimang_s,
                                                 t_even = t_uneven)),
            by = c("camera", "tsec")) |> 
  mutate(swimdirx_s = cos(swimang_s),
         swimdiry_s = sin(swimang_s))

data1swimdir |>
  ggplot(aes(x = tsec, y = swimdirx_s, color = contigid)) +
  geom_path() +
  facet_wrap(~ camera)
  
```


```{r}
data1rotate <-
  data1swimdir |> 
  ungroup() |> 
  mutate(outline = purrr::pmap(list(df = outline, x = "xctr", y = "yctr", 
                                 a = "m", b = "n",
                                 swimdirx = swimdirx_s, swimdiry = swimdiry_s),
                            rotate_to_swimdir))
```

```{r}
head(data1rotate)
data1rotate$outline[[1]]
```

```{r}
head(data1rotate)
```

```{r}
len.med <-
  data1rotate |> 
  mutate(len = map_vec(outline, \(df) df$len[[1]])) |> 
  ungroup() |> 
  pull(len) |> 
  median(na.rm = TRUE)

dm <- len.med / ceiling(len.med / 20)
m0 <- seq(0, len.med, by = dm)
```

```{r}
head(data1rotate) |> 
  mutate(mn.ht = map(outline, \(df) with(df, tibble(m.tail = m[side == "T"],
                                                  n.tail = n[side == "T"])))) |> 
  unnest(mn.ht)
```

```{r}
interp_side2 <- function(df, mcol, ncol, m0)
{
  m1 <- c(0, pull(df, {{mcol}}))
  n1 <- c(0, pull(df, {{ncol}}))
  
  mn <- as_tibble(approx(m1, n1, xout = m0))
  colnames(mn) <- c("m0", "n0")
  mn
}
```

# CONTINUE - get even spacing on each side relative to m

```{r}
data1sides <-
  head(data1rotate) |> 
  hoist(outline, "m", "n", "side", "len") |> 
  select(-outline) |> 
  unnest(c(m,n,side, len)) |> 
  group_by(imnum) |> 
  mutate(m.tail = m[side == "T"],
         n.tail = n[side == "T"]) |> 
  dplyr::filter(side %in% c("L", "R")) |>
  group_by(imnum, camera, side) |> 
  arrange(m, .by_group = TRUE) |> 
  nest(sidepts = c(m,n, m.tail,n.tail)) |> 
  ungroup() 

data1sides$sidepts[[1]]
data1sides |> 
  mutate(sideptseven = purrr::map(sidepts, \(df) interp_side(df, mcol = m, ncol = n, m.tail = m.tail, n.tail = n.tail, m0 = m0))) |> 
  unnest(sideptseven)
  # group_map(\(df,k) interp_side(df, m,n, m.tail,n.tail, m0))
  # mutate(sideptseven)
  #group_by(imnum, camera, side) |> 
  #nest(sidepts = c(m, n))
  # dplyr::filter(side %in% c("L", "R")) |> 
  # select(side, m, n) |> 
  # nest(sidepts = c(m, n), .by = side)
```


```{r}
data1rotate |> 
  hoist(data, "xctr", "yctr", "m", "n", "side") |> 
  select(-data) |> 
  unnest(c(xctr, yctr, m, n, side)) |> 
  filter(imnum == sample(imnum, 1)) |> 
  ggplot(aes(x = m, y = n, color = side)) +
  geom_point() +
  geom_point(aes(x = xctr, y = yctr, color = side)) +
  facet_wrap(~camera) +
  coord_fixed()
```

```{r}
data1swimdir$data[[1]]
```

```{r}
dt <- 0.02
filtcoefs <- gsignal::butter(9, 1 * (2*dt), "low", output = "Sos")

q |> 
  # dplyr::filter(camera == "C1" & block == 0) |> 
  mutate(swimang = atan2(swimdiry, swimdirx),
         swimang = gsignal::unwrap(swimang)) |> 
  group_by(camera, block) |> 
  group_modify(\(df, k) smooth_pts(df, t = tsec, pts = contains("swim"),
                                              filtercoefs = filtcoefs, tol = 0.01)) |> 
  mutate(swimdirx_s2 = cos(swimang_s),
         swimdiry_s2 = sin(swimang_s)) |> 
  # mutate(swimdirx_s = filtfiltends(filtcoefs, swimdirx)) |> 
  ggplot(aes(x = tsec)) +
  geom_path(aes(y = swimdirx), color = "black") +
  geom_path(aes(y = swimdirx_s2), color = "red") +
  facet_wrap(~ camera)
```

```{r}
q |> 
  ggplot(aes(x = tsec, y = swimdirx, color = factor(block))) +
  geom_path() +
  facet_wrap(~ camera)

```

```{r}
ca <- 
  data1ptsgood |> 
  ungroup() |> 
  filter(imnum == imnum1) |> 
  get_central_axis()

data1ptsgood |> 
  filter(imnum == imnum1) |> 
  ggplot(aes(x = x, y = y, color = side)) +
  geom_point() +
  geom_segment(data = ~ head(.x),
               aes(x = x.head, y = y.head,
                   xend = x.head + 100 * ca[1], yend = y.head + 100 * ca[2])) +
  coord_fixed()
```

