function calibrate_bottomview(calibpath, imageFileNames1, imageFileNames2, squareSize, outputfile)

% % Define images to process
% calibFilePath = '/Volumes/Data/WHOI-2022/Data from Erik Anderson/TE_WHOI_2022_bottomview/calibrations/TE_06_16_2022_1655_stereo_calib_images';
% 
% imageFileNames1 = {'Right_Cam1.tif',...
%     'Right_Cam2.tif',...
%     'Right_Cam3.tif',...
%     'Right_Cam4.tif',...
%     'Right_Cam5.tif',...
%     'Right_Cam6.tif',...
%     'Right_Cam7.tif',...
%     'Right_Cam8.tif',...
%     'Right_Cam9.tif',...
%     'Right_Cam10.tif',...
%     'Right_Cam11.tif',...
%     'Right_Cam12.tif',...
%     'Right_Cam13.tif',...
%     'Right_Cam14.tif',...
%     'Right_Cam15.tif',...
%     'Right_Cam16.tif',...
%     'Right_Cam17.tif',...
%     'Right_Cam18.tif',...
%     'Right_Cam19.tif',...
%     'Right_Cam20.tif',...
%     'Right_Cam21.tif',...
%     'Right_Cam22.tif',...
%     };
% imageFileNames2 = {'Left_Cam1.tif',...
%     'Left_Cam2.tif',...
%     'Left_Cam3.tif',...
%     'Left_Cam4.tif',...
%     'Left_Cam5.tif',...
%     'Left_Cam6.tif',...
%     'Left_Cam7.tif',...
%     'Left_Cam8.tif',...
%     'Left_Cam9.tif',...
%     'Left_Cam10.tif',...
%     'Left_Cam11.tif',...
%     'Left_Cam12.tif',...
%     'Left_Cam13.tif',...
%     'Left_Cam14.tif',...
%     'Left_Cam15.tif',...
%     'Left_Cam16.tif',...
%     'Left_Cam17.tif',...
%     'Left_Cam18.tif',...
%     'Left_Cam19.tif',...
%     'Left_Cam20.tif',...
%     'Left_Cam21.tif',...
%     'Left_Cam22.tif',...
%     };

for i = 1:length(imageFileNames1)
    imageFileNames1{i} = fullfile(calibpath, imageFileNames1{i});
    imageFileNames2{i} = fullfile(calibpath, imageFileNames2{i});
end

% Detect calibration pattern in images
detector = vision.calibration.stereo.CheckerboardDetector();
[imagePoints, imagesUsed] = detectPatternPoints(detector, imageFileNames1, imageFileNames2);

% Generate world coordinates for the planar patten keypoints
% squareSize = 2.885000e+01;  % in units of 'millimeters'
worldPoints = generateWorldPoints(detector, 'SquareSize', squareSize);

% Read one of the images from the first stereo pair
I1 = imread(imageFileNames1{1});
[mrows, ncols, ~] = size(I1);

% Calibrate the camera
[stereoParams, pairsUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
% h1=figure; showReprojectionErrors(stereoParams);

% Visualize pattern locations
% h2=figure; showExtrinsics(stereoParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, stereoParams);

% % You can use the calibration data to rectify stereo images.
% I2 = imread(imageFileNames2{1});
% [J1, J2, reprojectionMatrix] = rectifyStereoImages(I1, I2, stereoParams);

save(outputfile, ...
    "stereoParams", "estimationErrors", "imagePoints", "worldPoints", ...
    "imageFileNames1", "imageFileNames2");
